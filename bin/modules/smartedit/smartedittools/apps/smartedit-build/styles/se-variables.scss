$fd-support-css-var-fallback: true;

$se-space-modify: normal !default; //normal, compact
$se-spacing--base: 4px !default;
$se-spacing: () !default;
$se-spacing: map-merge(
    (
        base: $se-spacing--base,
        //4
        xxs: $se-spacing--base * 2,
        //8
        xs: $se-spacing--base * 3,
        //12
        s: $se-spacing--base * 4,
        //16
        reg: $se-spacing--base * 6,
        //24** was 20
        m: $se-spacing--base * 8,
        //32
        l: $se-spacing--base * 9,
        //36
        xl: $se-spacing--base * 10,
        //40
        xxl: $se-spacing--base * 12,
        //48** new
    ),
    $se-spacing
);

$se-spacing-common: () !default;
$se-spacing-common: map-merge(
    (
        'tiny': 'xxs',
        //8px
        'small': 's',
        //16px
        'regular': 'reg',
        //24px
        'medium': 'm',
        //32px
        'large': 'xxl' //48
    ),
    $se-spacing-common
);

//accepts size key or increment, modify enables on se-space-modifier
@function se-space($size: reg, $modifiable: false) {
    $_map: $se-spacing;
    //set base
    $_size: map-get($_map, base);
    $_common: false;
    @if map-has-key($se-spacing-common, $size) {
        $_common: true;
        $size: map-get($se-spacing-common, $size);
    }
    @if type-of($size) == number {
        //multiply
        $_size: $_size * $size;
    } @else {
        @if map-has-key($_map, $size) {
            $_size: map-get($_map, $size);
        } @else {
            @warn "Invalid $size of `#{$size}`. Valid $size values are #{map-keys($_map)}. Returning default `#{$_size}`.";
        }
    }
    @if $modifiable {
        $_size: se-modify-space_($_size);
    }
    @return $_size;
}

//space helper
@function se-modify-space_($size) {
    $_size: $size;
    @if $se-space-modify == compact {
        $_size: $_size / 2;
    }
    @return $_size;
}

@function se-fade($color, $opacity) {
    @return transparentize($color, 1 - $opacity);
}

@mixin se-triangle($size, $color, $direction, $varcolor: null) {
    $width: nth($size, 1);
    $height: nth($size, length($size));
    $foreground-color: nth($color, 1);
    $background-color: if(length($color) == 2, nth($color, 2), transparent);
    height: 0;
    width: 0;
    border-style: solid;
    @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left)
    {
        $width: $width / 2;
        $height: if(length($size) > 1, $height, $height/2);
        @if $direction == up {
            border-width: 0 $width $height $width;
            @if $varcolor {
                @include se-var-color('border-bottom-color', $foreground-color, $varcolor);
            } @else {
                border-bottom-color: $foreground-color;
            }
            border-left-color: $background-color;
            border-right-color: $background-color;
        } @else if $direction == right {
            border-width: $width 0 $width $height;
            border-bottom-color: $background-color;
            @if $varcolor {
                @include se-var-color('border-left-color', $foreground-color, $varcolor);
            } @else {
                border-left-color: $foreground-color;
            }
            border-top-color: $background-color;
        } @else if $direction == down {
            border-width: $height $width 0 $width;
            @if $varcolor {
                @include se-var-color('border-top-color', $foreground-color, $varcolor);
            } @else {
                border-top-color: $foreground-color;
            }
            border-left-color: $background-color;
            border-right-color: $background-color;
        } @else if $direction == left {
            border-width: $width $height $width 0;
            border-bottom-color: $background-color;
            @if $varcolor {
                @include se-var-color('border-right-color', $foreground-color, $varcolor);
            } @else {
                border-right-color: $foreground-color;
            }
            border-top-color: $background-color;
        }
    } @else if ($direction == up-right) or ($direction == up-left) {
        border-top: $height solid $foreground-color;

        @if $direction == up-right {
            border-left: $width solid $background-color;
        } @else if $direction == up-left {
            border-right: $width solid $background-color;
        }
    } @else if ($direction == down-right) or ($direction == down-left) {
        border-bottom: $height solid $foreground-color;

        @if $direction == down-right {
            border-left: $width solid $background-color;
        } @else if $direction == down-left {
            border-right: $width solid $background-color;
        }
    } @else if ($direction == inset-up) {
        border-color: $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $height $width;
    } @else if ($direction == inset-down) {
        border-color: $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $height $width;
    } @else if ($direction == inset-right) {
        border-color: $background-color $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $width $height;
    } @else if ($direction == inset-left) {
        border-color: $background-color $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $width $height;
    }
}

$se-type--base: 16 !default;
$se-type: () !default;
$se-type: map-merge(
    (
        //"key": font-size line-height margin-bottom
        '-1': #{12 / $se-type--base}rem 16/12 8px,
        //12/16 8 btm
        '0': #{14 / $se-type--base}rem 20/14 12px,
        //14/20 12
        '1': #{16 / $se-type--base}rem 20/16 12px,
        //16/20 12
        '2': #{18 / $se-type--base}rem 24/18 12px,
        //18/24 12
        '3': #{20 / $se-type--base}rem 28/20 12px,
        //20/28 12
        '4': #{24 / $se-type--base}rem 32/24 16px,
        //23/32 16
        '5': #{36 / $se-type--base}rem 40/36 20px,
        //36/40 20
        '6': #{48 / $se-type--base}rem 52/48 24px,
        //48/52 24
    ),
    $se-type
);
$se-font-size: #{$se-type--base}px !default;
$se-line-height: 20 /#{$se-type--base} !default;

//weights
$se-weights: () !default;
$se-weights: map-merge(
    (
        'light': 300,
        'normal': 400,
        'bold': 700
    ),
    $se-weights
);

// get line-height from main map
@function se-line-height($size: '0') {
    $_map: $se-type;
    $_size: '0';
    $list: map-get($_map, '0');
    @if map-has-key($_map, $size) {
        $list: map-get($_map, $size);
    } @else {
        @warn "Invalid $size of `#{$size}` in the map $se-type. Valid $size values are #{map-keys($_map)}. Returning `#{$_size}`.";
    }
    @return nth($list, 2);
}

// get font-size from main map
@function se-font-size($size: '0') {
    $_map: $se-type;
    $_size: '0';
    $list: map-get($_map, '0');
    @if map-has-key($_map, $size) {
        $list: map-get($_map, $size);
    } @else {
        @warn "Invalid $size of `#{$size}` in the map $se-type. Valid $size values are #{map-keys($_map)}. Returning `#{$_size}`.";
    }
    @return nth($list, 1);
}

@function se-font-weight($weight: 'normal') {
    $_map: $se-weights;
    $_weight: map-get($_map, 'normal');
    @if $weight == 'reg' {
        $weight: 'normal';
    }
    @if map-has-key($_map, $weight) {
        $_weight: map-get($_map, $weight);
    } @else {
        @warn "Invalid $weight of `#{$weight}` in the map $se-weights. Valid $weight values are #{map-keys($_map)}. Returning `#{$_weight}`.";
    }
    @return $_weight;
}

//$weight: "light", "normal", "bold"
@mixin se-weight($weight: 'normal') {
    font-weight: se-font-weight($weight);
}

@mixin se-var-color($property, $value, $var: null, $important: false) {
    @if $fd-support-css-var-fallback {
        @if $important {
            #{$property}: #{$value} !important;
        } @else {
            #{$property}: #{$value};
        }
    }
    @if $var {
        @if $important {
            #{$property}: var(#{$var}) !important;
        } @else {
            #{$property}: var(#{$var});
        }
    }
}

$se-color--action: var(--sapLink_Active_Color) !default;
$se-color-base: var(--sapBaseColor);
$se-colors-background-states: () !default;
$se-colors-background-states: map-merge(
    (
        'hover': var(--sapLegend_WorkingBackground),
        'selected': var(--sapList_SelectionBackgroundColor),
        'selected-hover': var(--sapList_SelectionBackgroundColor),
        'positive': var(--sapSuccessBackground),
        'negative': var(--sapErrorBackground),
        'alert': var(--sapWarningBackground),
        'information': var(--sapInformationBackground),
        'default': var(--sapNeutralBackground)
    ),
    $se-colors-background-states
);

//state colors
$se-colors-action-states: () !default;
$se-colors-action-states: map-merge(
    (
        'hover': var(--sapLink_Hover_Color),
        'selected': hsl($se-color--action, 90%, 7%),
        'disabled': var(--sapContent_DisabledTextColor),
        'visited': linear-gradient(45deg, $se-color--action, $se-color-base)
    ),
    $se-colors-action-states
);

//$state: hover, selected, disabled, visited, negative, positive, alert
//$type: background, action
@function se-color-state($state, $type: 'background') {
    $_map: $se-colors-background-states;
    @if $type == 'action' {
        $_map: $se-colors-action-states;
    }
    //check type
    @if map-has-key($_map, $state) {
        $_color: map-get($_map, $state);
        @return $_color;
    } @else {
        @warn "Invalid map $state of `#{$state}`. Valid $state values are #{map-keys($_map)}. Returning `black`.";
        @return black;
    }
}

@mixin se-type($size: '0', $weight: 'normal') {
    $list: map-get($se-type, $size);
    font-size: se-font-size($size) !important;
    line-height: se-line-height($size);
    //set weight
    font-weight: se-font-weight($weight);
}

$font-sap: '72', '72full', Arial, Helvetica, sans-serif;
$z-index--front-most: 9999;
$smartedit-gutter: 50px;

$z-index-popovers: 9999;
$smartedit-white: var(--sapBaseColor);
$smartedit-grey2: #dbe3eb;
$smartedit-grey24: #445976;

@mixin se-fd-disabled {
    &[aria-disabled='true'],
    &.is-disabled,
    &:disabled {
        @content;
    }
}

// Placements
@mixin se-flex-row($justify-content: '') {
    display: flex;
    flex-direction: row;
    align-items: center;
    @if ($justify-content != '') {
        justify-content: $justify-content;
    }
}
@mixin se-flex-column($align-items: '') {
    display: flex;
    flex-direction: column;
    @if ($align-items != '') {
        align-items: $align-items;
    }
}
@mixin se-dropdown-menu($side, $arrow-tip: 'arrow') {
    @include se-box-shadow;
    background-color: var(--sapBaseColor);
    border-radius: var(--sapElement_BorderCornerRadius);
    min-width: 100px;
    width: fit-content;
    position: absolute;
    border: se-border();
    z-index: 2000;
    top: 96%;

    &::before {
        @include se-triangle(
            16px 8px,
            var(--sapGroup_ContentBorderColor),
            up,
            var(--sapField_BorderColor)
        );
        content: '';
        position: absolute;
        top: -8px;
    }
    &::after {
        @include se-triangle(
            16px 8px,
            var(--sapBaseColor),
            up,
            var(--sapButton_Attention_Hover_Background)
        );
        content: '';
        position: absolute;
        top: -7px;
    }
    @if ($side == 'right') {
        left: initial !important;
        right: 0;
        &::before,
        &::after {
            right: 10px;
        }
    }
    @if ($side == 'center') {
        &,
        &::before,
        &::after {
            left: 50%;
            transform: translate(-50%);
        }
    }
    @if ($side == 'left') {
        &::before,
        &::after {
            left: 14px;
        }
    }
    @if ($arrow-tip == 'no-arrow') {
        &::before,
        &::after {
            display: none;
        }
    }
}
@mixin se-grid-columns($columns, $gap: '') {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    @if ($gap != '') {
        grid-gap: $gap;
    }
}

// Elements
@function se-border($color: 'reg', $width: 1px) {
    @if ($color == 'reg') {
        @return $width solid var(--sapGroup_ContentBorderColor);
    }
    @if ($color == 2) {
        @return $width solid var(--sapField_BorderColor);
    }
    @return $width solid $color;
}

@mixin se-text-ellipsis {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    word-break: break-all;
}

@mixin se-disabled() {
    cursor: not-allowed;
    opacity: 0.4;
}

@mixin se-text-btn() {
    @include se-flex-row;
    padding: 0;
    margin: 0;
    border: none;
    box-shadow: none;
    outline: none;
    background-color: transparent;
    text-decoration: none;
    &[disabled] {
        @include se-disabled();
    }
}

@mixin se-box-shadow($type: '') {
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);

    @if ($type == 'heavy') {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    }
}
@mixin se-popover-box-shadow() {
    box-shadow: 0 0 4px 0 var(--sapGroup_ContentBorderColor);
}
@mixin se-container-section($section, $isDropdown: '') {
    padding: 20px;
    @if ($section == 'header') {
        &:first-child {
            @include se-type('1');
            color: var(--sapTextColor);
        }
        @include se-flex-row(space-between);
        border-bottom: se-border();
        height: 53px;
        @if ($isDropdown == 'dropdown') {
            padding-top: 15px;
            height: 48px;
        }
    }
    @if ($section == 'footer') {
        @include se-flex-row(flex-end);
        border-top: se-border();
        height: 69px;
        button {
            text-transform: capitalize;
            margin-left: se-space('xs');
        }
    }
    @if ($section == 'body') {
        overflow-y: auto;
        max-height: 70vh;
        @if ($isDropdown == 'dropdown') {
            padding-bottom: 15px;
        }
    }
}
@mixin se-active-link {
    border-bottom: 3px solid var(--sapLinkColor);
    border-left: 2px solid transparent;
    border-right: 2px solid transparent;
    border-radius: se-space('xs');
}
@mixin status-icon {
    width: 12px;
    height: 12px;
    border-radius: 50%;
}
@mixin se-popover {
    @include se-popover-box-shadow();
    z-index: $z-index-popovers;
    background-color: var(--sapBaseColor);
    color: var(--sapTextColor);
    border: 1px solid var(--sapGroup_ContentBorderColor);
    border-radius: se-space('base');
}

@mixin se-scrolling-container {
    overflow-y: auto;
    max-height: 200px;
}
